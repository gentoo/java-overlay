#!/usr/bin/env python

# Copyright 1999-2013 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Id$

import argparse, inspect, os, re, sys
from java_config_2.EnvironmentManager import EnvironmentManager
from java_config_2.Errors import UnexistingPackageError
from itertools import chain

try:
  from itertools import ifilter # Python 2
except ImportError:
  ifilter = filter # Python 3

description = "Launch Minecraft using Gentoo's packaged libraries."
usage = sys.argv[0] + " [java options] net.minecraft.client.main.Main [minecraft options]"

try:
  klass = "net.minecraft.client.main.Main"
  split = sys.argv.index(klass)
except ValueError:
  try:
    klass = "net.minecraft.launchwrapper.Launch"
    split = sys.argv.index(klass)
  except ValueError:
    split = None

parser = argparse.ArgumentParser(description=description, usage=usage)
group = parser.add_argument_group("Java options")
group.add_argument("-classpath", "-cp", dest="-classpath", required=True)
group.add_argument("-Djava.library.path", dest="origNativeDir", required=True)
java_args = parser.parse_known_args(sys.argv[1:split])

parser = argparse.ArgumentParser(description=description, usage=usage)
group = parser.add_argument_group("Minecraft options")
group.add_argument("--gameDir", dest="--gameDir", required=True)
group.add_argument("--version", dest="--version")
minecraft_args = parser.parse_known_args(sys.argv[split+1:] if split else [])

def get_jar(pkg_name, jar):
  global nativeDirs

  try:
    pkg = manager.get_package(pkg_name)
  except UnexistingPackageError:
    return None

  jars = pkg.classpath().split(":")
  jar = next(ifilter(lambda x: x.endswith("/" + jar), jars), None)

  if jar:
    dirs = pkg.query("LIBRARY_PATH")
    if dirs: nativeDirs |= set(dirs.split(":"))

  return jar

def transform(path):
  if path.startswith(libDir):
    tail = path[len(libDir):]

    match = re.match("org/ow2/asm/asm-all/([^/]+)/", tail)
    if match: return (get_jar("asm-4.1", "asm.jar") or path) + ":" + (get_jar("asm-4.1", "asm-tree.jar") or path)

    match = re.match("org/bouncycastle/bcprov-jdk15on/([^/]+)/", tail)
    if match: return get_jar("bcprov", "bcprov.jar") or path

    match = re.match("commons-io/commons-io/([^/]+)/", tail)
    if match: return get_jar("commons-io-1", "commons-io.jar") or path

    match = re.match("org/apache/commons/commons-lang3/([^/]+)/", tail)
    if match: return get_jar("commons-lang-3.1", "commons-lang.jar") or path

    match = re.match("com/google/code/gson/gson/([^/]+)/", tail)
    if match: return get_jar("gson-2.2.2", "gson.jar") or path

    match = re.match("com/google/guava/guava/([^/]+)/", tail)
    if match: return get_jar("guava-14", "guava.jar") or path

    match = re.match("net/java/jinput/jinput/([^/]+)/", tail)
    if match: return get_jar("jinput", "jinput.jar") or path

    match = re.match("net/sf/jopt-simple/jopt-simple/([^/]+)/", tail)
    if match: return get_jar("jopt-simple", "jopt-simple.jar") or path

    match = re.match("net/java/jutils/jutils/([^/]+)/", tail)
    if match: return get_jar("jutils", "jutils.jar") or path

    match = re.match("org/lwjgl/lwjgl/lwjgl(|_util)/([^/]+)/", tail)
    if match: return get_jar("lwjgl-2.9", "lwjgl" + match.group(1) + ".jar") or path

    match = re.match("com/paulscode/(codecwav|librarylwjglopenal|libraryjavasound|soundsystem)/([^/]+)/", tail)
    if match: return get_jar("paulscode-" + match.group(1), "paulscode-" + match.group(1) + ".jar") or path

    match = re.match("com/paulscode/codecjorbis/([^/]+)/", tail)
    if match: return (get_jar("paulscode-codecjorbis", "paulscode-codecjorbis.jar") or path) + ":" + (get_jar("jorbis", "jorbis.jar") or path)

  return path

nativeDirs = set()
parsed_java_args = vars(java_args[0])
parsed_minecraft_args = vars(minecraft_args[0])

if len(inspect.getargspec(EnvironmentManager.__init__).args) == 1:
  # java-config < 2.2
  manager = EnvironmentManager()
else:
  # java-config >= 2.2
  manager = EnvironmentManager(os.getenv("ROOT", ""), os.getenv("EPREFIX", "@GENTOO_PORTAGE_EPREFIX@"))

libDir = parsed_minecraft_args["--gameDir"] + "/libraries/"

origNativeDir = parsed_java_args["origNativeDir"]
del parsed_java_args["origNativeDir"]

classpath = parsed_java_args["-classpath"].split(":")
parsed_java_args["-classpath"] = ":".join(map(transform, classpath))

for k in list(parsed_minecraft_args.keys()):
  if parsed_minecraft_args[k] == None:
    del parsed_minecraft_args[k]

args = [ "java" ]
args.append("-Djava.library.path=" + ":".join(nativeDirs) + ":" + origNativeDir)
args.extend(list(chain.from_iterable(parsed_java_args.items())))
args.extend(java_args[1])
args.append(klass)
args.extend(list(chain.from_iterable(parsed_minecraft_args.items())))
args.extend(minecraft_args[1])

sys.stderr.write(" ".join(args) + "\n")
sys.stderr.flush()

os.execlp("java", *args)
